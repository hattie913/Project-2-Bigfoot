# -*- coding: utf-8 -*-
"""MA705Bigfoot_Visualizations.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BPUvBmQxPvt0PVWcSHlOYg2qTwdBbQUz
"""

#import and install all necessary packages
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

pd.set_option('display.max_rows',500)
pd.set_option('display.max_columns', 500)

!pip install geopandas
import geopandas

#open merge_bigfoot_continental.pkl, create a dataframe and store it in bigfootDF_continental
bigfootDF_continental = pd.read_pickle('merge_bigfoot_continental.pkl')
bigfootDF_continental

#added new column combining county and state together for graphing
bigfootDF_continental['county_state'] = bigfootDF_continental['county'] + ", " + bigfootDF_continental['state']

print(bigfootDF_continental.head()) #display the beginning part of data

bigfootDF_continental.columns #display the name of the columns

#group the same county_state together and create a series as sightings_county to store the calculation of the count of county_state disappeared within each county_state group
sightings_county = bigfootDF_continental.groupby('county_state')['county_state'].size()
print(sightings_county)
print("")

#print(">>>>>>>>>>>>>>>>>>>>>>>>", len(sightings_county))

#create a pandas date frame as county_sightings DF based on the sightings_county series and rename the column from county_state to count
county_sightingsDF = pd.DataFrame(sightings_county).rename(columns = {'county_state' : 'count'})
print(county_sightingsDF.head())
print("")

#sort the date in the dateframe in descending order 
county_sightingsDF.sort_values('count', ascending = False, inplace = True) 
print(county_sightingsDF.head())
print("")

#extract the top 10 number of bigfoot sightings from the dataframe and store it as top_county_sightingsDF
top_county_sightingsDF = county_sightingsDF[:10]
print(top_county_sightingsDF)
print("")

#create a list of county_state 
top_county_sightings = list(top_county_sightingsDF.index)
print(top_county_sightings) #generate 10 county names with the most sightings

#extract all data with the top 10 county_state in the county_state column using the county_state list created above
top_sightingsDF = bigfootDF_continental[bigfootDF_continental['county_state'].isin(top_county_sightings)]
print(top_sightingsDF

"""Mid Temperature"""

#group the same county_state together and create a series as top_mid_temp_county to store the calculation of average temperature_mid within each county_state group
top_mid_temp_county = top_sightingsDF.groupby('county_state')['temperature_mid'].mean()
print(top_mid_temp_county)
print("")
print(type(top_mid_temp_county))

#merge the top_county_sightingsDF and top_mid_temp_county today using the index
temp_sightings_county = pd.merge(top_county_sightingsDF, top_mid_temp_county, right_index = True, left_index = True)
print(temp_sightings_county)

#create a bar chart based on the merged temp_sightings_county 
fig, ax = plt.subplots(1, figsize = (12, 8))
temp_sightings_county.plot(kind = 'bar', ax = ax)

labels = list(temp_sightings_county.index)
count_county = list(temp_sightings_county['count'])
temp_county = list(temp_sightings_county['temperature_mid'])

x = np.arange(len(labels))
width = 0.25 

#set the width of each bar
rects1 = ax.bar(x - width/2, count_county, width)
rects2 = ax.bar(x + width/2, temp_county, width)

#annotate the data above each bar 
def autolabel(rects):
    for rect in rects:
        height = rect.get_height()
        ax.text(rect.get_x() + rect.get_width()/2., height, '%d' % int(height), ha='center', va='bottom')

autolabel(rects1)
autolabel(rects2)

#adjust y axis limits
plt.ylim(0, 70)

plt.ylabel("Mid Temperature / Number of Sightings", fontsize = 12)
plt.xlabel("County", fontsize = 12)
plt.title("Average Mid Temperature Per County with Highest Number of Bigfoot Sightings", fontsize = 16)

#adjust the labels on the legend
plt.legend(labels = ('Number of Sightings', 'Mid Temperature'))

"""Visibility"""

#group the same county_state together and create a series as top_visibility_county to store the calculation of average visibility within each county_state group
top_visibility_county = top_sightingsDF.groupby('county_state')['visibility'].mean()
print(top_visibility_county)
print("")
print(type(top_visibility_county))

#merge the top_county_sightingsDF and top_visibility_county today using the index
visibility_sightings_county = pd.merge(top_county_sightingsDF, top_visibility_county, right_index = True, left_index = True)
print(visibility_sightings_county)

#create a bar chart based on the merged visibility_sightings_county 
fig, ax = plt.subplots(1, figsize = (12, 8))
visibility_sightings_county.plot(kind = 'bar', ax = ax)

labels = list(visibility_sightings_county.index)
count_county = list(visibility_sightings_county['count'])
visibility_county = list(visibility_sightings_county['visibility'])

x = np.arange(len(labels))
width = 0.35 

#set the width of each bar
rects1 = ax.bar(x - width/2, count_county, width)
rects2 = ax.bar(x + width/2, visibility_county, width)

#annotate the data above each bar 
def autolabel(rects):
    for rect in rects:
        height = rect.get_height()
        ax.text(rect.get_x() + rect.get_width()/2., height, '%d' % int(height), ha='center', va='bottom')

autolabel(rects1)
autolabel(rects2)

plt.ylabel("Visibility / Number of Sightings", fontsize = 12)
plt.xlabel("County", fontsize = 12)
plt.title("Average Visibility Per County with Highest Number of Bigfoot Sightings", fontsize = 16)

#adjust the labels on the legend
plt.legend(labels = ('Number of Sightings', 'Visibility'))

"""Population"""

top_sightingsDF.dtypes #display the data types      #population data is object

#extract the county_state and population columns from top_sightingsDF and store them in a new data frame county_populationDF
county_populationDF = top_sightingsDF[['county_state','population']]
print(county_populationDF)

#change the data type of population column from object to integer
county_populationDF['population'] = county_populationDF['population'].str.replace(",", "") 
print(county_populationDF.head())
print("")

county_populationDF['population'] = county_populationDF['population'].astype(int)
print(county_populationDF.head())
print("")

#divide the population data by 1000 for the easiness of graphing
county_populationDF['population'] = county_populationDF['population']/1000
print(county_populationDF.head())
print("")

print(county_populationDF.dtypes) #double check the data type of population column

#group the same county_state together and create a series as top_population_county to store the population within each county_state group
top_population_county = county_populationDF.groupby('county_state')['population'].mean()
print(top_population_county)
print("")
print(type(top_population_county))

#merge the top_county_sightingsDF and top_population_county today using the index
population_sightings_county = pd.merge(top_county_sightingsDF, top_population_county, right_index = True, left_index = True)
print(population_sightings_county)

#create a bar chart based on the merged population_sightings_county 
fig, ax = plt.subplots(1, figsize = (12, 8))
population_sightings_county.plot(kind = 'bar', ax = ax)

labels = list(population_sightings_county.index)
count_county = list(population_sightings_county['count'])
population_county = list(population_sightings_county['population'])

x = np.arange(len(labels))
width = 0.35 

#set the width of each bar
rects1 = ax.bar(x - width/2, count_county, width)
rects2 = ax.bar(x + width/2, population_county, width)

#annotate the data above each bar 
def autolabel(rects):
    for rect in rects:
        height = rect.get_height()
        ax.text(rect.get_x() + rect.get_width()/2., height, '%d' % int(height), ha='center', va='bottom')

autolabel(rects1)
autolabel(rects2)

plt.ylabel("Population (in thousands) / Number of Sightings", fontsize = 12)
plt.xlabel("County", fontsize = 12)
plt.title("Population Per County with Highest Number of Bigfoot Sightings", fontsize = 16)

#adjust the labels on the legend
plt.legend(labels = ('Number of Sightings', 'Population'))

"""Mid Temperature and Dew Point """

#create a scatter plot based on the temperature_mid and dew_point columns
fig, ax = plt.subplots(1, figsize=(12, 12))

#group the data by county_state
groups = top_sightingsDF.groupby('county_state')

#plot the data; use the same color for the same county_state; set the size of the dot based on the count of county_state in each county_state group
for name, group in groups:
    ax.scatter(group.dew_point, group.temperature_mid, marker='o', s = len(group)*8, alpha = 0.7, label = name)
    """
    z = np.polyfit(group.dew_point, group.temperature_mid, 1) ##?
    p = np.poly1d(z)
    plt.plot(group.dew_point, group.temperature_mid) 
    """

plt.legend()

plt.title("Number of Sightings Per County: Mid Temperature & Dew Point ", fontsize = 20)
plt.ylabel("Mid Temperature", fontsize = 14)
plt.xlabel("Dew Point", fontsize = 12)

"""
z = np.polyfit(top_sightingsDF['dew_point'], top_sightingsDF['temperature_mid'], 1)
p = np.poly1d(z)
plt.plot(top_sightingsDF.dew_point, p(top_sightingsDF.dew_point), 'r-')
"""