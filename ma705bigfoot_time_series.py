# -*- coding: utf-8 -*-
"""MA705Bigfoot_time_series.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XNmCUXQCIO1ELh9fE8CqY3BTEQ-2Yn-7
"""

#import and install all necessary packages
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

pd.set_option('display.max_rows',500)
pd.set_option('display.max_columns', 500)

!pip install geopandas
import geopandas

# open and read the pickle file and store data using the variable bigfoot_geo
bigfoot_geo = pd.read_pickle('bigfoot_geo.pkl')

print(bigfoot_geo.head()) #preview the pickle file

print(bigfoot_geo['date'].head()) #preview the date column from the bigfoot_geo

#create a new dataframe only with the date column from bigfoot_geo 
bigfoot_year = pd.DataFrame(np.array(bigfoot_geo['date']), columns = ["date"])

#format dates from the date column and store them in a new column called formatted_date
bigfoot_year['formatted_date'] = pd.to_datetime(bigfoot_year["date"]).dt.strftime('%Y-%m-%d')
print(bigfoot_year.head())
print("")

#extract years from the formatted_date column and store them in a new column called year
bigfoot_year['year'] = pd.DatetimeIndex(bigfoot_year['formatted_date']).year
print(bigfoot_year.head())

print(bigfoot_year['year'].dtypes) #check the data type of year column
print("")

#determne whether there is any error by checking if any year data is greater than 2018
correct_max_year = 2018
error = bigfoot_year[bigfoot_year['year'] > correct_max_year] #create the new dataframe to store the errors
print(error.head())
print("")
print("Number of rows greater than ", correct_max_year, ": ", len(error), sep = "") 
print("")

min_year_error = error['year'].min()
print("The earliest year shown in the error dataframe: ", min_year_error)
max_year_error = error['year'].max()
print("The earliest year shown in the error dataframe: ",max_year_error)

print(bigfoot_year.dtypes) #check the data type for all the column

#correct the year using np.where function and store the corrected year in a new column correct_year
#if the year in year column is greater than 2018, subtract 100 from the year; otherwise, no adjustment needed
bigfoot_year['correct_year'] = np.where(bigfoot_year['year'] > correct_max_year, bigfoot_year['year'] - 100, bigfoot_year['year']) 
print(bigfoot_year.head())      
print("")                                                                                              

#sort the correct_year column in ascending order
bigfoot_year.sort_values('correct_year', inplace = True)
print(bigfoot_year.head())

#group the same year together and calculate the size of the grouped year; store them with a variable bigfoot_sightings_year
bigfoot_sightings_year = bigfoot_year.groupby('correct_year').size()
print(bigfoot_sightings_year.head())
print("")

print(type(bigfoot_sightings_year)) #double check to confirm the data type is a series

#drop the first row (1869) of the data by extracting the data after 1869
bigfoot_sightings_year_drop1869 = bigfoot_sightings_year[1:]
print(bigfoot_sightings_year_drop1869.head())

#create a visualization of a Bigfoot sightings per year (a time series)
fig = plt.figure(1, figsize=(14, 8))
plt.plot(bigfoot_sightings_year_drop1869.index, bigfoot_sightings_year_drop1869.values, color = 'purple')

plt.style.use("seaborn-darkgrid") 

plt.xlabel("Year", fontsize = 14)
plt.ylabel("Number of Sightings", fontsize = 14)
plt.title("Bigfoot Sightings Per Year", fontsize = 20)

earliest_year = bigfoot_sightings_year_drop1869.index[0]
#print(earliest_year)
latest_year = bigfoot_sightings_year_drop1869.index[-1]
#print(latest_year)

#plt.xticks(ticks = range(earliest_year, latest_year, 5), rotation = 45)
plt.xticks(ticks = range(1920, 2021, 5), rotation = 45)

min_value = bigfoot_sightings_year_drop1869.values.min()
#print(min_value)
max_value = bigfoot_sightings_year_drop1869.values.max()
#print(max_value)

plt.yticks(ticks = range(0, max_value, 50))